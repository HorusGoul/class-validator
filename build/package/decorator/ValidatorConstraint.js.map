{"version":3,"sources":["../../src/decorator/ValidatorConstraint.ts"],"names":[],"mappings":";;AAAA,qEAAkE;AAClE,0CAA8C;AAC9C,+DAA4D;AAE5D;;GAEG;AACH,6BAAoC,OAA4C;IAC5E,OAAO,UAAU,MAAgB;QAC7B,IAAM,OAAO,GAAG,OAAO,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QACxD,IAAI,IAAI,GAAG,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;QACvD,IAAI,CAAC,IAAI,EAAE;YACP,IAAI,GAAI,MAAc,CAAC,IAAI,CAAC;YAC5B,IAAI,CAAC,IAAI,EAAE,oCAAoC;gBAC3C,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,GAAG,GAAG,CAAC,CAAC,WAAW,EAAE,EAArB,CAAqB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SAC9F;QACD,IAAM,QAAQ,GAAG,IAAI,uCAAkB,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;QAC/D,4BAAgB,CAAC,iCAAe,CAAC,CAAC,qBAAqB,CAAC,QAAQ,CAAC,CAAC;IACtE,CAAC,CAAC;AACN,CAAC;AAZD,kDAYC","file":"ValidatorConstraint.js","sourcesContent":["import {ConstraintMetadata} from \"../metadata/ConstraintMetadata\";\nimport {getFromContainer} from \"../container\";\nimport {MetadataStorage} from \"../metadata/MetadataStorage\";\n\n/**\n * Registers custom validator class.\n */\nexport function ValidatorConstraint(options?: { name?: string, async?: boolean }) {\n    return function (target: Function) {\n        const isAsync = options && options.async ? true : false;\n        let name = options && options.name ? options.name : \"\";\n        if (!name) {\n            name = (target as any).name;\n            if (!name) // generate name if it was not given\n                name = name.replace(/\\.?([A-Z]+)/g, (x, y) => \"_\" + y.toLowerCase()).replace(/^_/, \"\");\n        }\n        const metadata = new ConstraintMetadata(target, name, isAsync);\n        getFromContainer(MetadataStorage).addConstraintMetadata(metadata);\n    };\n}\n"],"sourceRoot":".."}