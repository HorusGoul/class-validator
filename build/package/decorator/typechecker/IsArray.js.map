{"version":3,"sources":["../../src/decorator/typechecker/IsArray.ts"],"names":[],"mappings":";;AACA,4CAAuD;AAE1C,QAAA,QAAQ,GAAG,SAAS,CAAC;AAElC;;GAEG;AACH,iBAAwB,KAAU;IAC9B,OAAO,KAAK,YAAY,KAAK,CAAC;AAClC,CAAC;AAFD,0BAEC;AAED;;GAEG;AACH,iBAAwB,iBAAqC;IACzD,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,gBAAQ;QACd,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc;QACnC,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,4BAA4B,EAAzC,CAAyC,EAAE,iBAAiB,CAAC;KAC7G,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,0BAQC","file":"IsArray.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\n\nexport const IS_ARRAY = \"isArray\";\n\n/**\n * Checks if a given value is an array\n */\nexport function isArray(value: any): boolean {\n    return value instanceof Array;\n}\n\n/**\n * Checks if a value is an array.\n */\nexport function IsArray(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_ARRAY,\n            validate: (value) => isArray(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be an array\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}