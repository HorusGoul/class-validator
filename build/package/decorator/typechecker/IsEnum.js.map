{"version":3,"sources":["../../src/decorator/typechecker/IsEnum.ts"],"names":[],"mappings":";;AACA,4CAAuD;AAE1C,QAAA,OAAO,GAAG,QAAQ,CAAC;AAEhC;;GAEG;AACH,gBAAuB,KAAU,EAAE,MAAW;IAC1C,IAAM,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;SACjC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,MAAM,CAAC,CAAC,CAAC,EAAT,CAAS,CAAC,CAAC;IACzB,OAAO,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AAC1C,CAAC;AAJD,wBAIC;AAED;;GAEG;AACH,gBAAuB,MAAc,EAAE,iBAAqC;IACxE,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,eAAO;QACb,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAlC,CAAkC;QAC7D,WAAW,EAAE,CAAC,MAAM,CAAC;QACrB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,sCAAsC,EAAnD,CAAmD,EAAE,iBAAiB,CAAC;KACvH,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,wBASC","file":"IsEnum.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\n\nexport const IS_ENUM = \"isEnum\";\n\n/**\n * Checks if a given value is an enum\n */\nexport function isEnum(value: any, entity: any): boolean {\n    const enumValues = Object.keys(entity)\n        .map(k => entity[k]);\n    return enumValues.indexOf(value) >= 0;\n}\n\n/**\n * Checks if a value is a number enum.\n */\nexport function IsEnum(entity: Object, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_ENUM,\n            validate: (value, args) => isEnum(value, args.constraints[0]),\n            constraints: [entity],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be a valid enum value\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}