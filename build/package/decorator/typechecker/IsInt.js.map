{"version":3,"sources":["../../src/decorator/typechecker/IsInt.ts"],"names":[],"mappings":";;AACA,4CAAuD;AAE1C,QAAA,MAAM,GAAG,OAAO,CAAC;AAE9B;;GAEG;AACH,eAAsB,GAAW;IAC7B,OAAO,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACjC,CAAC;AAFD,sBAEC;AAED;;GAEG;AACH,eAAsB,iBAAqC;IACvD,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,cAAM;QACZ,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,KAAK,CAAC,KAAK,CAAC,EAAZ,CAAY;QACjC,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,qCAAqC,EAAlD,CAAkD,EAAE,iBAAiB,CAAC;KACtH,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,sBAQC","file":"IsInt.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\n\nexport const IS_INT = \"isInt\";\n\n/**\n * Checks if value is an integer.\n */\nexport function isInt(val: number): boolean {\n    return Number.isInteger(val);\n}\n\n/**\n * Checks if the value is an integer number.\n */\nexport function IsInt(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_INT,\n            validate: (value) => isInt(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be an integer number\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}