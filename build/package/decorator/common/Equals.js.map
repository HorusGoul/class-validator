{"version":3,"sources":["../../src/decorator/common/Equals.ts"],"names":[],"mappings":";;AACA,4CAAuD;AAE1C,QAAA,MAAM,GAAG,QAAQ,CAAC;AAE/B;;GAEG;AACH,gBAAuB,KAAU,EAAE,UAAe;IAC9C,OAAO,KAAK,KAAK,UAAU,CAAC;AAChC,CAAC;AAFD,wBAEC;AAED;;GAEG;AACH,gBAAuB,UAAe,EAAE,iBAAqC;IACzE,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,cAAM;QACZ,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAlC,CAAkC;QAC7D,WAAW,EAAE,CAAC,UAAU,CAAC;QACzB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,yCAAyC,EAAtD,CAAsD,EAAE,iBAAiB,CAAC;KAE1H,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AAVD,wBAUC","file":"Equals.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\n\nexport const EQUALS = \"equals\";\n\n/**\n * Checks if value matches (\"===\") the comparison.\n */\nexport function equals(value: any, comparison: any): boolean {\n    return value === comparison;\n}\n\n/**\n * Checks if the value match (\"===\") the comparison.\n */\nexport function Equals(comparison: any, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: EQUALS,\n            validate: (value, args) => equals(value, args.constraints[0]),\n            constraints: [comparison],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be equal to $constraint1\", validationOptions),\n\n        },\n        validationOptions\n    );\n}\n\n"],"sourceRoot":"../.."}