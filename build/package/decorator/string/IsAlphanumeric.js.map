{"version":3,"sources":["../../src/decorator/string/IsAlphanumeric.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,wEAA2E;AAE9D,QAAA,eAAe,GAAG,gBAAgB,CAAC;AAEhD;;;GAGG;AACH,wBAA+B,KAAa;IACxC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,yBAAyB,CAAC,KAAK,CAAC,CAAC;AACzE,CAAC;AAFD,wCAEC;AAED;;GAEG;AACH,wBAA+B,iBAAqC;IAChE,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,uBAAe;QACrB,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,cAAc,CAAC,KAAK,CAAC,EAArB,CAAqB;QAC1C,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,iDAAiD,EAA9D,CAA8D,EAAE,iBAAiB,CAAC;KAClI,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,wCAQC","file":"IsAlphanumeric.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsAlphanumeric = require(\"validator/lib/isAlphanumeric\");\n\nexport const IS_ALPHANUMERIC = \"isAlphanumeric\";\n\n/**\n * Checks if the string contains only letters and numbers.\n * If given value is not a string, then it returns false.\n */\nexport function isAlphanumeric(value: string): boolean {\n    return typeof value === \"string\" && validatorJsIsAlphanumeric(value);\n}\n\n/**\n * Checks if the string contains only letters and numbers.\n */\nexport function IsAlphanumeric(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_ALPHANUMERIC,\n            validate: (value) => isAlphanumeric(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must contain only letters and numbers\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}