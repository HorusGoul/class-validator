{"version":3,"sources":["../../src/decorator/string/IsBase64.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,4DAA+D;AAElD,QAAA,SAAS,GAAG,UAAU,CAAC;AAEpC;;;GAGG;AACH,kBAAyB,KAAa;IAClC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,mBAAmB,CAAC,KAAK,CAAC,CAAC;AACnE,CAAC;AAFD,4BAEC;AAED;;GAEG;AACH,kBAAyB,iBAAqC;IAC1D,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,iBAAS;QACf,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,QAAQ,CAAC,KAAK,CAAC,EAAf,CAAe;QACpC,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,kCAAkC,EAA/C,CAA+C,EAAE,iBAAiB,CAAC;KACnH,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,4BAQC","file":"IsBase64.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsBase64 = require(\"validator/lib/isBase64\");\n\nexport const IS_BASE64 = \"isBase64\";\n\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n */\nexport function isBase64(value: string): boolean {\n    return typeof value === \"string\" && validatorJsIsBase64(value);\n}\n\n/**\n * Checks if a string is base64 encoded.\n */\nexport function IsBase64(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_BASE64,\n            validate: (value) => isBase64(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be base64 encoded\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}