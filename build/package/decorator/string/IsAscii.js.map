{"version":3,"sources":["../../src/decorator/string/IsAscii.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,0DAA6D;AAEhD,QAAA,QAAQ,GAAG,SAAS,CAAC;AAElC;;;GAGG;AACH,iBAAwB,KAAa;IACjC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC;AAClE,CAAC;AAFD,0BAEC;AAED;;GAEG;AACH,iBAAwB,iBAAqC;IACzD,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,gBAAQ;QACd,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc;QACnC,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,8CAA8C,EAA3D,CAA2D,EAAE,iBAAiB,CAAC;KAC/H,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,0BAQC","file":"IsAscii.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsAscii = require(\"validator/lib/isAscii\");\n\nexport const IS_ASCII = \"isAscii\";\n\n/**\n * Checks if the string contains ASCII chars only.\n * If given value is not a string, then it returns false.\n */\nexport function isAscii(value: string): boolean {\n    return typeof value === \"string\" && validatorJsIsAscii(value);\n}\n\n/**\n * Checks if the string contains ASCII chars only.\n */\nexport function IsAscii(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_ASCII,\n            validate: (value) => isAscii(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must contain only ASCII characters\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}