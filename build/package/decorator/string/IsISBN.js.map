{"version":3,"sources":["../../src/decorator/string/IsISBN.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,wDAA2D;AAE9C,QAAA,OAAO,GAAG,QAAQ,CAAC;AAEhC;;;GAGG;AACH,gBAAuB,KAAa,EAAE,OAAqB;IACvD,yDAAyD;IACzD,IAAM,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACxD,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,iBAAiB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC5E,CAAC;AAJD,wBAIC;AAED;;GAEG;AACH,gBAAuB,OAAqB,EAAE,iBAAqC;IAC/E,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,eAAO;QACb,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAlC,CAAkC;QAC7D,WAAW,EAAE,CAAC,OAAO,CAAC;QACtB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,2BAA2B,EAAxC,CAAwC,EAAE,iBAAiB,CAAC;KAC5G,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,wBASC","file":"IsISBN.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsISBN = require(\"validator/lib/isISBN\");\n\nexport const IS_ISBN = \"isIsbn\";\n\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n */\nexport function isISBN(value: string, version?: \"10\" | \"13\"): boolean {\n    // typings are wrong: JS actually allows string or number\n    const versionNr = version ? Number(version) : undefined;\n    return typeof value === \"string\" && validatorJsIsISBN(value, versionNr);\n}\n\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n */\nexport function IsISBN(version?: \"10\" | \"13\", validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_ISBN,\n            validate: (value, args) => isISBN(value, args.constraints[0]),\n            constraints: [version],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be an ISBN\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}