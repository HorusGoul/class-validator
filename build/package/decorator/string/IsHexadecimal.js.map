{"version":3,"sources":["../../src/decorator/string/IsHexadecimal.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,sEAAyE;AAE5D,QAAA,cAAc,GAAG,eAAe,CAAC;AAE9C;;;GAGG;AACH,uBAA8B,KAAa;IACvC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,wBAAwB,CAAC,KAAK,CAAC,CAAC;AACxE,CAAC;AAFD,sCAEC;AAED;;GAEG;AACH,uBAA8B,iBAAqC;IAC/D,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,sBAAc;QACpB,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,aAAa,CAAC,KAAK,CAAC,EAApB,CAAoB;QACzC,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,wCAAwC,EAArD,CAAqD,EAAE,iBAAiB,CAAC;KACzH,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,sCAQC","file":"IsHexadecimal.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsHexadecimal = require(\"validator/lib/isHexadecimal\");\n\nexport const IS_HEXADECIMAL = \"isHexadecimal\";\n\n/**\n * Checks if the string is a hexadecimal number.\n * If given value is not a string, then it returns false.\n */\nexport function isHexadecimal(value: string): boolean {\n    return typeof value === \"string\" && validatorJsIsHexadecimal(value);\n}\n\n/**\n * Checks if the string is a hexadecimal number.\n */\nexport function IsHexadecimal(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_HEXADECIMAL,\n            validate: (value) => isHexadecimal(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be a hexadecimal number\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}