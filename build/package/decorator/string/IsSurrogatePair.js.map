{"version":3,"sources":["../../src/decorator/string/IsSurrogatePair.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,0EAA6E;AAEhE,QAAA,iBAAiB,GAAG,iBAAiB,CAAC;AAEnD;;;GAGG;AACH,yBAAgC,KAAa;IACzC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,0BAA0B,CAAC,KAAK,CAAC,CAAC;AAC1E,CAAC;AAFD,0CAEC;AAGD;;GAEG;AACH,yBAAgC,iBAAqC;IACjE,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,yBAAiB;QACvB,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,eAAe,CAAC,KAAK,CAAC,EAAtB,CAAsB;QAC3C,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,kDAAkD,EAA/D,CAA+D,EAAE,iBAAiB,CAAC;KACnI,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,0CAQC","file":"IsSurrogatePair.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsSurrogatePair = require(\"validator/lib/isSurrogatePair\");\n\nexport const IS_SURROGATE_PAIR = \"isSurrogatePair\";\n\n/**\n * Checks if the string contains any surrogate pairs chars.\n * If given value is not a string, then it returns false.\n */\nexport function isSurrogatePair(value: string): boolean {\n    return typeof value === \"string\" && validatorJsIsSurrogatePair(value);\n}\n\n\n/**\n * Checks if the string contains any surrogate pairs chars.\n */\nexport function IsSurrogatePair(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_SURROGATE_PAIR,\n            validate: (value) => isSurrogatePair(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must contain any surrogate pairs chars\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}