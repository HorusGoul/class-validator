{"version":3,"sources":["../../src/decorator/date/MinDate.ts"],"names":[],"mappings":";;AACA,4CAAuD;AAE1C,QAAA,QAAQ,GAAG,SAAS,CAAC;AAElC;;GAEG;AACH,iBAAwB,IAAU,EAAE,OAAa;IAC7C,OAAO,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;AACvD,CAAC;AAFD,0BAEC;AAED;;GAEG;AACH,iBAAwB,IAAU,EAAE,iBAAqC;IACrE,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,gBAAQ;QACd,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAnC,CAAmC;QAC9D,WAAW,EAAE,CAAC,IAAI,CAAC;QACnB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,2BAA2B,GAAG,UAAU,GAAG,2BAA2B,EAAtE,CAAsE,EAAE,iBAAiB,CAAC;KAC1I,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,0BASC","file":"MinDate.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\n\nexport const MIN_DATE = \"minDate\";\n\n/**\n * Checks if the value is a date that's after the specified date.\n */\nexport function minDate(date: Date, minDate: Date): boolean {\n    return date && date.getTime() >= minDate.getTime();\n}\n\n/**\n * Checks if the value is a date that's after the specified date.\n */\nexport function MinDate(date: Date, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: MIN_DATE,\n            validate: (value, args) => minDate(value, args.constraints[0]),\n            constraints: [date],\n            defaultMessage: buildMessage((eachPrefix) => \"minimal allowed date for \" + eachPrefix + \"$property is $constraint1\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}