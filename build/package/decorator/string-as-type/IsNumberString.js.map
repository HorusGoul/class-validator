{"version":3,"sources":["../../src/decorator/string-as-type/IsNumberString.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,8DAAiE;AAEpD,QAAA,gBAAgB,GAAG,gBAAgB,CAAC;AAEjD;;;GAGG;AACH,wBAA+B,KAAa,EAAE,OAAsC;IAChF,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,oBAAoB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC7E,CAAC;AAFD,wCAEC;AAED;;GAEG;AACH,wBAA+B,iBAAqC;IAChE,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,wBAAgB;QACtB,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,cAAc,CAAC,KAAK,CAAC,EAArB,CAAqB;QAC1C,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,mCAAmC,EAAhD,CAAgD,EAAE,iBAAiB,CAAC;KACpH,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,wCAQC","file":"IsNumberString.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsNumeric = require(\"validator/lib/isNumeric\");\n\nexport const IS_NUMBER_STRING = \"isNumberString\";\n\n/**\n * Checks if the string is numeric.\n * If given value is not a string, then it returns false.\n */\nexport function isNumberString(value: string, options?: ValidatorJS.IsNumericOptions): boolean {\n    return typeof value === \"string\" && validatorJsIsNumeric(value, options);\n}\n\n/**\n * Checks if the string is a number.\n */\nexport function IsNumberString(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_NUMBER_STRING,\n            validate: (value) => isNumberString(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be a number string\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}