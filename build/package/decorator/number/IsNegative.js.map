{"version":3,"sources":["../../src/decorator/number/IsNegative.ts"],"names":[],"mappings":";;AACA,4CAAuD;AAE1C,QAAA,WAAW,GAAG,YAAY,CAAC;AAExC;;GAEG;AACH,oBAA2B,KAAa;IACpC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,KAAK,GAAG,CAAC,CAAC;AAClD,CAAC;AAFD,gCAEC;AAED;;GAEG;AACH,oBAA2B,iBAAqC;IAC5D,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,mBAAW;QACjB,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,UAAU,CAAC,KAAK,CAAC,EAAjB,CAAiB;QACtC,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,qCAAqC,EAAlD,CAAkD,EAAE,iBAAiB,CAAC;KACtH,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,gCAQC","file":"IsNegative.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\n\nexport const IS_NEGATIVE = \"isNegative\";\n\n/**\n * Checks if the value is a negative number.\n */\nexport function isNegative(value: number): boolean {\n    return typeof value === \"number\" && value < 0;\n}\n\n/**\n * Checks if the value is a negative number.\n */\nexport function IsNegative(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_NEGATIVE,\n            validate: (value) => isNegative(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be a negative number\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}