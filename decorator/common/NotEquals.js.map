{"version":3,"sources":["../../src/decorator/common/NotEquals.ts"],"names":[],"mappings":";;AACA,4CAAuD;AAE1C,QAAA,UAAU,GAAG,WAAW,CAAC;AAEtC;;GAEG;AACH,mBAA0B,KAAU,EAAE,UAAe;IACjD,OAAO,KAAK,KAAK,UAAU,CAAC;AAChC,CAAC;AAFD,8BAEC;AAED;;GAEG;AACH,mBAA0B,UAAe,EAAE,iBAAqC;IAC5E,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,kBAAU;QAChB,WAAW,EAAE,CAAC,UAAU,CAAC;QACzB,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAArC,CAAqC;QAChE,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,+CAA+C,EAA5D,CAA4D,EAAE,iBAAiB,CAAC;KAChI,EACD,iBAAiB,CAAC,CAAC;AAC3B,CAAC;AARD,8BAQC","file":"NotEquals.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\n\nexport const NOT_EQUALS = \"notEquals\";\n\n/**\n * Checks if value does not match (\"!==\") the comparison.\n */\nexport function notEquals(value: any, comparison: any): boolean {\n    return value !== comparison;\n}\n\n/**\n * Checks if the value does not match (\"!==\") the comparison.\n */\nexport function NotEquals(comparison: any, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: NOT_EQUALS,\n            constraints: [comparison],\n            validate: (value, args) => notEquals(value, args.constraints[0]),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property should not be equal to $constraint1\", validationOptions)\n        },\n        validationOptions);\n}\n"],"sourceRoot":"../.."}