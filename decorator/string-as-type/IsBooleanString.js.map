{"version":3,"sources":["../../src/decorator/string-as-type/IsBooleanString.ts"],"names":[],"mappings":";;AAAA,4CAAuD;AAEvD,8DAAiE;AAEpD,QAAA,iBAAiB,GAAG,iBAAiB,CAAC;AAEnD;;;GAGG;AACH,yBAAgC,KAAa;IACzC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC;AACpE,CAAC;AAFD,0CAEC;AAED;;GAEG;AACH,yBAAgC,iBAAqC;IACjE,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,yBAAiB;QACvB,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,eAAe,CAAC,KAAK,CAAC,EAAtB,CAAsB;QAC3C,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,UAAU,GAAG,oCAAoC,EAA9D,CAA8D,EAAE,iBAAiB,CAAC;KAClI,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,0CAQC","file":"IsBooleanString.js","sourcesContent":["import {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport {ValidationOptions} from \"../ValidationOptions\";\nimport validatorJsIsBoolean = require(\"validator/lib/isBoolean\");\n\nexport const IS_BOOLEAN_STRING = \"isBooleanString\";\n\n/**\n * Checks if a string is a boolean.\n * If given value is not a string, then it returns false.\n */\nexport function isBooleanString(value: string): boolean {\n    return typeof value === \"string\" && validatorJsIsBoolean(value);\n}\n\n/**\n * Checks if a string is a boolean.\n */\nexport function IsBooleanString(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_BOOLEAN_STRING,\n            validate: (value) => isBooleanString(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + eachPrefix + \"$property must be a boolean string\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}