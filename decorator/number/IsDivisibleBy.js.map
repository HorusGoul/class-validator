{"version":3,"sources":["../../src/decorator/number/IsDivisibleBy.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,oEAAsE;AAEzD,QAAA,eAAe,GAAG,eAAe,CAAC;AAE/C;;GAEG;AACH,uBAA8B,KAAa,EAAE,GAAW;IACpD,OAAO,OAAO,KAAK,KAAK,QAAQ;QAC5B,OAAO,GAAG,KAAK,QAAQ;QACvB,sBAAsB,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,CAAC;AACnD,CAAC;AAJD,sCAIC;AAED;;GAEG;AACH,uBAA8B,GAAW,EAAE,iBAAqC;IAC5E,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,uBAAe;QACrB,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAzC,CAAyC;QACpE,WAAW,EAAE,CAAC,GAAG,CAAC;QAClB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,6CAA6C,EAA1D,CAA0D,EAAE,iBAAiB,CAAC;KAC9H,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,sCASC","file":"IsDivisibleBy.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport * as validatorIsDivisibleBy from \"validator/lib/isDivisibleBy\";\n\nexport const IS_DIVISIBLE_BY = \"isDivisibleBy\";\n\n/**\n * Checks if value is a number that's divisible by another.\n */\nexport function isDivisibleBy(value: number, num: number): boolean {\n    return typeof value === \"number\" &&\n        typeof num === \"number\" &&\n        validatorIsDivisibleBy(String(value), num);\n}\n\n/**\n * Checks if the value is a number that's divisible by another.\n */\nexport function IsDivisibleBy(num: number, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_DIVISIBLE_BY,\n            validate: (value, args) => isDivisibleBy(value, args.constraints[0]),\n            constraints: [num],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be divisible by $constraint1\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}