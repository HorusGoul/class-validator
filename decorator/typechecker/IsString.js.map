{"version":3,"sources":["../../src/decorator/typechecker/IsString.ts"],"names":[],"mappings":";;AAAA,4CAAuD;AAG1C,QAAA,SAAS,GAAG,UAAU,CAAC;AAEpC;;GAEG;AACH,kBAAyB,KAAU;IAC/B,OAAO,KAAK,YAAY,MAAM,IAAI,OAAO,KAAK,KAAK,QAAQ,CAAC;AAChE,CAAC;AAFD,4BAEC;AAED;;GAEG;AACH,kBAAyB,iBAAqC;IAC1D,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,iBAAS;QACf,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,QAAQ,CAAC,KAAK,CAAC,EAAf,CAAe;QACpC,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,4BAA4B,EAAzC,CAAyC,EAAE,iBAAiB,CAAC;KAC7G,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,4BAQC","file":"IsString.js","sourcesContent":["import {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport {ValidationOptions} from \"../ValidationOptions\";\n\nexport const IS_STRING = \"isString\";\n\n/**\n * Checks if a given value is a real string.\n */\nexport function isString(value: any): boolean {\n    return value instanceof String || typeof value === \"string\";\n}\n\n/**\n * Checks if a value is a string.\n */\nexport function IsString(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_STRING,\n            validate: (value) => isString(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be a string\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}