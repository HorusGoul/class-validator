{"version":3,"sources":["../../src/decorator/Validate.ts"],"names":[],"mappings":";;AAEA,qEAAkE;AAClE,+DAA4D;AAC5D,iEAA8D;AAC9D,0CAA8C;AAQ9C,kBAAyB,eAAyB,EAAE,8BAA0D,EAAE,sBAA0C;IACtJ,OAAO,UAAU,MAAc,EAAE,YAAoB;QACjD,IAAM,IAAI,GAA2B;YACjC,IAAI,EAAE,iCAAe,CAAC,iBAAiB;YACvC,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,aAAa,EAAE,eAAe;YAC9B,WAAW,EAAE,8BAA8B,YAAY,KAAK,CAAC,CAAC,CAAC,8BAAuC,CAAC,CAAC,CAAC,SAAS;YAClH,iBAAiB,EAAE,CAAC,CAAC,8BAA8B,YAAY,KAAK,CAAC,CAAC,CAAC,CAAC,8BAAmD,CAAC,CAAC,CAAC,sBAAsB;SACvJ,CAAC;QACF,4BAAgB,CAAC,iCAAe,CAAC,CAAC,qBAAqB,CAAC,IAAI,uCAAkB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1F,CAAC,CAAC;AACN,CAAC;AAZD,4BAYC","file":"Validate.js","sourcesContent":["import {ValidationOptions} from \"./ValidationOptions\";\nimport {ValidationMetadataArgs} from \"../metadata/ValidationMetadataArgs\";\nimport {ValidationMetadata} from \"../metadata/ValidationMetadata\";\nimport {MetadataStorage} from \"../metadata/MetadataStorage\";\nimport {ValidationTypes} from \"../validation/ValidationTypes\";\nimport {getFromContainer} from \"../container\";\n\n/**\n * Performs validation based on the given custom validation class.\n * Validation class must be decorated with ValidatorConstraint decorator.\n */\nexport function Validate(constraintClass: Function, validationOptions?: ValidationOptions): Function;\nexport function Validate(constraintClass: Function, constraints?: any[], validationOptions?: ValidationOptions): Function;\nexport function Validate(constraintClass: Function, constraintsOrValidationOptions?: any[] | ValidationOptions, maybeValidationOptions?: ValidationOptions): Function {\n    return function (object: Object, propertyName: string) {\n        const args: ValidationMetadataArgs = {\n            type: ValidationTypes.CUSTOM_VALIDATION,\n            target: object.constructor,\n            propertyName: propertyName,\n            constraintCls: constraintClass,\n            constraints: constraintsOrValidationOptions instanceof Array ? constraintsOrValidationOptions as any[] : undefined,\n            validationOptions: !(constraintsOrValidationOptions instanceof Array) ? constraintsOrValidationOptions as ValidationOptions : maybeValidationOptions\n        };\n        getFromContainer(MetadataStorage).addValidationMetadata(new ValidationMetadata(args));\n    };\n}\n"],"sourceRoot":".."}