{"version":3,"sources":["../../src/decorator/string/IsISO8601.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,8DAAiE;AAEpD,QAAA,UAAU,GAAG,WAAW,CAAC;AAGtC;;;GAGG;AACH,mBAA0B,KAAa;IACnC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC;AACpE,CAAC;AAFD,8BAEC;AAGD;;GAEG;AACH,mBAA0B,iBAAqC;IAC3D,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,kBAAU;QAChB,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,SAAS,CAAC,KAAK,CAAC,EAAhB,CAAgB;QACrC,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,gDAAgD,EAA7D,CAA6D,EAAE,iBAAiB,CAAC;KACjI,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,8BAQC","file":"IsISO8601.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsISO8601 = require(\"validator/lib/isISO8601\");\n\nexport const IS_ISO8601 = \"isIso8601\";\n\n\n/**\n * Checks if the string is a valid ISO 8601 date.\n * If given value is not a string, then it returns false.\n */\nexport function isISO8601(value: string): boolean {\n    return typeof value === \"string\" && validatorJsIsISO8601(value);\n}\n\n\n/**\n * Checks if the string is a valid ISO 8601 date.\n */\nexport function IsISO8601(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_ISO8601,\n            validate: (value) => isISO8601(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be a valid ISO 8601 date string\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}