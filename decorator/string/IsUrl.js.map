{"version":3,"sources":["../../src/decorator/string/IsUrl.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,sDAAyD;AAE5C,QAAA,MAAM,GAAG,OAAO,CAAC;AAE9B;;;GAGG;AACH,eAAsB,KAAa,EAAE,OAAkC;IACnE,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AACzE,CAAC;AAFD,sBAEC;AAED;;GAEG;AACH,eAAsB,OAAkC,EAAE,iBAAqC;IAC3F,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,cAAM;QACZ,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAjC,CAAiC;QAC5D,WAAW,EAAE,CAAC,OAAO,CAAC;QACtB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,kCAAkC,EAA/C,CAA+C,EAAE,iBAAiB,CAAC;KACnH,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,sBASC","file":"IsUrl.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsURL = require(\"validator/lib/isURL\");\n\nexport const IS_URL = \"isUrl\";\n\n/**\n * Checks if the string is an url.\n * If given value is not a string, then it returns false.\n */\nexport function isURL(value: string, options?: ValidatorJS.IsURLOptions): boolean {\n    return typeof value === \"string\" && validatorJsIsURL(value, options);\n}\n\n/**\n * Checks if the string is an url.\n */\nexport function IsUrl(options?: ValidatorJS.IsURLOptions, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_URL,\n            validate: (value, args) => isURL(value, args.constraints[0]),\n            constraints: [options],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be an URL address\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}