{"version":3,"sources":["../../src/decorator/string/IsByteLength.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,oEAAuE;AAE1D,QAAA,cAAc,GAAG,cAAc,CAAC;AAE7C;;;GAGG;AACH,sBAA6B,KAAa,EAAE,GAAW,EAAE,GAAY;IACjE,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,uBAAuB,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AACjF,CAAC;AAFD,oCAEC;AAGD;;GAEG;AACH,sBAA6B,GAAW,EAAE,GAAY,EAAE,iBAAqC;IACzF,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,sBAAc;QACpB,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAA7D,CAA6D;QACxF,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;QACvB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,2EAA2E,EAAxF,CAAwF,EAAE,iBAAiB,CAAC;KAC5J,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,oCASC","file":"IsByteLength.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsByteLength = require(\"validator/lib/isByteLength\");\n\nexport const IS_BYTE_LENGTH = \"isByteLength\";\n\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n */\nexport function isByteLength(value: string, min: number, max?: number): boolean {\n    return typeof value === \"string\" && validatorJsIsByteLength(value, min, max);\n}\n\n\n/**\n * Checks if the string's length (in bytes) falls in a range.\n */\nexport function IsByteLength(min: number, max?: number, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_BYTE_LENGTH,\n            validate: (value, args) => isByteLength(value, args.constraints[0], args.constraints[1]),\n            constraints: [min, max],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property's byte length must fall into ($constraint1, $constraint2) range\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}