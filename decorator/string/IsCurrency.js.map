{"version":3,"sources":["../../src/decorator/string/IsCurrency.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,gEAAmE;AAEtD,QAAA,WAAW,GAAG,YAAY,CAAC;AAExC;;;GAGG;AACH,oBAA2B,KAAa,EAAE,OAAuC;IAC7E,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,qBAAqB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC9E,CAAC;AAFD,gCAEC;AAED;;GAEG;AACH,oBAA2B,OAAuC,EAAE,iBAAqC;IACrG,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,mBAAW;QACjB,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAtC,CAAsC;QACjE,WAAW,EAAE,CAAC,OAAO,CAAC;QACtB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,8BAA8B,EAA3C,CAA2C,EAAE,iBAAiB,CAAC;KAC/G,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,gCASC","file":"IsCurrency.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsCurrency = require(\"validator/lib/isCurrency\");\n\nexport const IS_CURRENCY = \"isCurrency\";\n\n/**\n * Checks if the string is a valid currency amount.\n * If given value is not a string, then it returns false.\n */\nexport function isCurrency(value: string, options?: ValidatorJS.IsCurrencyOptions): boolean {\n    return typeof value === \"string\" && validatorJsIsCurrency(value, options);\n}\n\n/**\n * Checks if the string is a valid currency amount.\n */\nexport function IsCurrency(options?: ValidatorJS.IsCurrencyOptions, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_CURRENCY,\n            validate: (value, args) => isCurrency(value, args.constraints[0]),\n            constraints: [options],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be a currency\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}