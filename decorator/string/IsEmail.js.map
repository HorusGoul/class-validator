{"version":3,"sources":["../../src/decorator/string/IsEmail.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,0DAA6D;AAEhD,QAAA,QAAQ,GAAG,SAAS,CAAC;AAElC;;;GAGG;AACH,iBAAwB,KAAa,EAAE,OAAoC;IACvE,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,kBAAkB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC3E,CAAC;AAFD,0BAEC;AAED;;GAEG;AACH,iBAAwB,OAAoC,EAAE,iBAAqC;IAC/F,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,gBAAQ;QACd,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAnC,CAAmC;QAC9D,WAAW,EAAE,CAAC,OAAO,CAAC;QACtB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,4BAA4B,EAAzC,CAAyC,EAAE,iBAAiB,CAAC;KAC7G,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,0BASC","file":"IsEmail.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsEmail = require(\"validator/lib/isEmail\");\n\nexport const IS_EMAIL = \"isEmail\";\n\n/**\n * Checks if the string is an email.\n * If given value is not a string, then it returns false.\n */\nexport function isEmail(value: string, options?: ValidatorJS.IsEmailOptions): boolean {\n    return typeof value === \"string\" && validatorJsIsEmail(value, options);\n}\n\n/**\n * Checks if the string is an email.\n */\nexport function IsEmail(options?: ValidatorJS.IsEmailOptions, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_EMAIL,\n            validate: (value, args) => isEmail(value, args.constraints[0]),\n            constraints: [options],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be an email\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}