{"version":3,"sources":["../../src/decorator/string/Length.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,4DAA+D;AAElD,QAAA,MAAM,GAAG,QAAQ,CAAC;AAE/B;;;GAGG;AACH,gBAAuB,KAAa,EAAE,GAAW,EAAE,GAAY;IAC3D,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,mBAAmB,CAAC,KAAK,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAC7E,CAAC;AAFD,wBAEC;AAED;;GAEG;AACH,gBAAuB,GAAW,EAAE,GAAY,EAAE,iBAAqC;IACnF,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,cAAM;QACZ,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAvD,CAAuD;QAClF,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;QACvB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,EAAE,IAAI;YAC1C,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;YACtF,IAAM,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC;YACtF,IAAI,WAAW,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;gBACzE,OAAO,UAAU,GAAG,mEAAmE,CAAC;aAC3F;iBAAM,IAAI,WAAW,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;gBACjE,OAAO,UAAU,GAAG,oEAAoE,CAAC;aAC5F;YACD,OAAO,UAAU,GAAG,6GAA6G,CAAC;QACtI,CAAC,EAAE,iBAAiB,CAAC;KACxB,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AAlBD,wBAkBC","file":"Length.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsLength = require(\"validator/lib/isLength\");\n\nexport const LENGTH = \"length\";\n\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function length(value: string, min: number, max?: number): boolean {\n    return typeof value === \"string\" && validatorJsIsLength(value, min, max);\n}\n\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n */\nexport function Length(min: number, max?: number, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: LENGTH,\n            validate: (value, args) => length(value, args.constraints[0], args.constraints[1]),\n            constraints: [min, max],\n            defaultMessage: buildMessage((eachPrefix, args) => {\n                const isMinLength = args.constraints[0] !== null && args.constraints[0] !== undefined;\n                const isMaxLength = args.constraints[1] !== null && args.constraints[1] !== undefined;\n                if (isMinLength && (!args.value || args.value.length < args.constraints[0])) {\n                    return eachPrefix + \"$property must be longer than or equal to $constraint1 characters\";\n                } else if (isMaxLength && (args.value.length > args.constraints[1])) {\n                    return eachPrefix + \"$property must be shorter than or equal to $constraint2 characters\";\n                }\n                return eachPrefix + \"$property must be longer than or equal to $constraint1 and shorter than or equal to $constraint2 characters\";\n            }, validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}