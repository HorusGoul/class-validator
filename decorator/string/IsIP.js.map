{"version":3,"sources":["../../src/decorator/string/IsIP.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,oDAAuD;AAE1C,QAAA,KAAK,GAAG,MAAM,CAAC;AAE5B;;;GAGG;AACH,cAAqB,KAAa,EAAE,OAAmB;IACnD,sEAAsE;IACtE,IAAM,SAAS,GAAG,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACxD,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,eAAe,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;AAC1E,CAAC;AAJD,oBAIC;AAED;;GAEG;AACH,cAAqB,OAAmB,EAAE,iBAAqC;IAC3E,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,aAAK;QACX,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAhC,CAAgC;QAC3D,WAAW,EAAE,CAAC,OAAO,CAAC;QACtB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,iCAAiC,EAA9C,CAA8C,EAAE,iBAAiB,CAAC;KAClH,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,oBASC","file":"IsIP.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsIP = require(\"validator/lib/isIP\");\n\nexport const IS_IP = \"isIp\";\n\n/**\n * Checks if the string is an IP (version 4 or 6).\n * If given value is not a string, then it returns false.\n */\nexport function isIP(value: string, version?: \"4\" | \"6\"): boolean {\n    // typings for isIP are wrong: JS actually accepts strings and numbers\n    const versionNr = version ? Number(version) : undefined;\n    return typeof value === \"string\" && validatorJsIsIP(value, versionNr);\n}\n\n/**\n * Checks if the string is an IP (version 4 or 6).\n */\nexport function IsIP(version?: \"4\" | \"6\", validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_IP,\n            validate: (value, args) => isIP(value, args.constraints[0]),\n            constraints: [version],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be an ip address\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}