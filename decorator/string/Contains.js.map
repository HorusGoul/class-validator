{"version":3,"sources":["../../src/decorator/string/Contains.ts"],"names":[],"mappings":";;AAAA,4CAAuD;AAEvD,4DAA+D;AAElD,QAAA,QAAQ,GAAG,UAAU,CAAC;AAEnC;;;GAGG;AACH,kBAAyB,KAAa,EAAE,IAAY;IAChD,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,mBAAmB,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;AACzE,CAAC;AAFD,4BAEC;AAED;;GAEG;AACH,kBAAyB,IAAY,EAAE,iBAAqC;IAExE,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,gBAAQ;QACd,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAApC,CAAoC;QAC/D,WAAW,EAAE,CAAC,IAAI,CAAC;QACnB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,8CAA8C,EAA3D,CAA2D,EAAE,iBAAiB,CAAC;KAC/H,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AAVD,4BAUC","file":"Contains.js","sourcesContent":["import {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport {ValidationOptions} from \"../ValidationOptions\";\nimport validatorJsContains = require(\"validator/lib/contains\");\n\nexport const CONTAINS = \"contains\";\n\n/**\n * Checks if the string contains the seed.\n * If given value is not a string, then it returns false.\n */\nexport function contains(value: string, seed: string): boolean {\n    return typeof value === \"string\" && validatorJsContains(value, seed);\n}\n\n/**\n * Checks if the string contains the seed.\n */\nexport function Contains(seed: string, validationOptions?: ValidationOptions) {\n\n    return ValidateBy({\n            name: CONTAINS,\n            validate: (value, args) => contains(value, args.constraints[0]),\n            constraints: [seed],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must contain a $constraint1 string\", validationOptions),\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}