{"version":3,"sources":["../../src/decorator/string/IsFQDN.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,wDAA2D;AAE9C,QAAA,OAAO,GAAG,QAAQ,CAAC;AAEhC;;;GAGG;AACH,gBAAuB,KAAa,EAAE,OAAmC;IACrE,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC1E,CAAC;AAFD,wBAEC;AAED;;GAEG;AACH,gBAAuB,OAAmC,EAAE,iBAAqC;IAC7F,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,eAAO;QACb,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAlC,CAAkC;QAC7D,WAAW,EAAE,CAAC,OAAO,CAAC;QACtB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,uCAAuC,EAApD,CAAoD,EAAE,iBAAiB,CAAC;KACxH,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,wBASC","file":"IsFQDN.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsFQDN = require(\"validator/lib/isFQDN\");\n\nexport const IS_FQDN = \"isFqdn\";\n\n/**\n * Checks if the string is a fully qualified domain name (e.g. domain.com).\n * If given value is not a string, then it returns false.\n */\nexport function isFQDN(value: string, options?: ValidatorJS.IsFQDNOptions): boolean {\n    return typeof value === \"string\" && validatorJsIsFQDN(value, options);\n}\n\n/**\n * Checks if the string is a fully qualified domain name (e.g. domain.com).\n */\nexport function IsFQDN(options?: ValidatorJS.IsFQDNOptions, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_FQDN,\n            validate: (value, args) => isFQDN(value, args.constraints[0]),\n            constraints: [options],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be a valid domain name\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}