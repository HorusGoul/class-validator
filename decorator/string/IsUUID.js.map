{"version":3,"sources":["../../src/decorator/string/IsUUID.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,wDAA2D;AAE9C,QAAA,OAAO,GAAG,QAAQ,CAAC;AAEhC;;;GAGG;AACH,gBAAuB,KAAa,EAAE,OAAiC;IACnE,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,iBAAiB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;AAC1E,CAAC;AAFD,wBAEC;AAED;;GAEG;AACH,gBAAuB,OAAiC,EAAE,iBAAqC;IAC3F,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,eAAO;QACb,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAlC,CAAkC;QAC7D,WAAW,EAAE,CAAC,OAAO,CAAC;QACtB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,2BAA2B,EAAxC,CAAwC,EAAE,iBAAiB,CAAC;KAC5G,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,wBASC","file":"IsUUID.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsUUID = require(\"validator/lib/isUUID\");\n\nexport const IS_UUID = \"isUuid\";\n\n/**\n * Checks if the string is a UUID (version 3, 4 or 5).\n * If given value is not a string, then it returns false.\n */\nexport function isUUID(value: string, version?: 3|4|5|\"3\"|\"4\"|\"5\"|\"all\"): boolean {\n    return typeof value === \"string\" && validatorJsIsUUID(value, version);\n}\n\n/**\n * Checks if the string is a UUID (version 3, 4 or 5).\n */\nexport function IsUUID(version?: 3|4|5|\"3\"|\"4\"|\"5\"|\"all\", validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_UUID,\n            validate: (value, args) => isUUID(value, args.constraints[0]),\n            constraints: [version],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be an UUID\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}