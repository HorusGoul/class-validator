{"version":3,"sources":["../../src/decorator/string/IsISIN.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,wDAA2D;AAE9C,QAAA,OAAO,GAAG,QAAQ,CAAC;AAEhC;;;GAGG;AACH,gBAAuB,KAAa;IAChC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC;AACjE,CAAC;AAFD,wBAEC;AAED;;GAEG;AACH,gBAAuB,iBAAqC;IACxD,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,eAAO;QACb,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,MAAM,CAAC,KAAK,CAAC,EAAb,CAAa;QAClC,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,uDAAuD,EAApE,CAAoE,EAAE,iBAAiB,CAAC;KACxI,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,wBAQC","file":"IsISIN.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsISIN = require(\"validator/lib/isISIN\");\n\nexport const IS_ISIN = \"isIsin\";\n\n/**\n * Checks if the string is an ISIN (stock/security identifier).\n * If given value is not a string, then it returns false.\n */\nexport function isISIN(value: string): boolean {\n    return typeof value === \"string\" && validatorJsIsISIN(value);\n}\n\n/**\n * Checks if the string is an ISIN (stock/security identifier).\n */\nexport function IsISIN(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_ISIN,\n            validate: (value) => isISIN(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be an ISIN (stock/security identifier)\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}