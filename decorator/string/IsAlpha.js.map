{"version":3,"sources":["../../src/decorator/string/IsAlpha.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,0DAA6D;AAEhD,QAAA,QAAQ,GAAG,SAAS,CAAC;AAElC;;;GAGG;AACH,iBAAwB,KAAa;IACjC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,kBAAkB,CAAC,KAAK,CAAC,CAAC;AAClE,CAAC;AAFD,0BAEC;AAGD;;GAEG;AACH,iBAAwB,iBAAqC;IACzD,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,gBAAQ;QACd,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,OAAO,CAAC,KAAK,CAAC,EAAd,CAAc;QACnC,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,8CAA8C,EAA3D,CAA2D,EAAE,iBAAiB,CAAC;KAC/H,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,0BAQC","file":"IsAlpha.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsAlpha = require(\"validator/lib/isAlpha\");\n\nexport const IS_ALPHA = \"isAlpha\";\n\n/**\n * Checks if the string contains only letters (a-zA-Z).\n * If given value is not a string, then it returns false.\n */\nexport function isAlpha(value: string): boolean {\n    return typeof value === \"string\" && validatorJsIsAlpha(value);\n}\n\n\n/**\n * Checks if the string contains only letters (a-zA-Z).\n */\nexport function IsAlpha(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_ALPHA,\n            validate: (value) => isAlpha(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must contain only letters (a-zA-Z)\", validationOptions)\n        },\n        validationOptions\n    );\n}\n\n"],"sourceRoot":"../.."}