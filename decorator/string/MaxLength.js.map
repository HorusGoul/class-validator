{"version":3,"sources":["../../src/decorator/string/MaxLength.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,mCAAgC;AAEnB,QAAA,UAAU,GAAG,WAAW,CAAC;AAEtC;;;GAGG;AACH,mBAA0B,KAAa,EAAE,GAAW;IAChD,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,eAAM,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;AAC9D,CAAC;AAFD,8BAEC;AAED;;GAEG;AACH,mBAA0B,GAAW,EAAE,iBAAqC;IACxE,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,kBAAU;QAChB,QAAQ,EAAE,UAAC,KAAK,EAAE,IAAI,IAAK,OAAA,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAArC,CAAqC;QAChE,WAAW,EAAE,CAAC,GAAG,CAAC;QAClB,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,oEAAoE,EAAjF,CAAiF,EAAE,iBAAiB,CAAC;KACrJ,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AATD,8BASC","file":"MaxLength.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport {length} from \"./Length\";\n\nexport const MAX_LENGTH = \"maxLength\";\n\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n */\nexport function maxLength(value: string, max: number) {\n    return typeof value === \"string\" && length(value, 0, max);\n}\n\n/**\n * Checks if the string's length is not more than given number. Note: this function takes into account surrogate pairs.\n */\nexport function MaxLength(max: number, validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: MAX_LENGTH,\n            validate: (value, args) => maxLength(value, args.constraints[0]),\n            constraints: [max],\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be shorter than or equal to $constraint1 characters\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}