{"version":3,"sources":["../../src/decorator/string/IsMongoId.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,8DAAiE;AAEpD,QAAA,WAAW,GAAG,WAAW,CAAC;AAEvC;;;GAGG;AACH,mBAA0B,KAAa;IACnC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,oBAAoB,CAAC,KAAK,CAAC,CAAC;AACpE,CAAC;AAFD,8BAEC;AAED;;GAEG;AACH,mBAA0B,iBAAqC;IAC3D,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,mBAAW;QACjB,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,SAAS,CAAC,KAAK,CAAC,EAAhB,CAAgB;QACrC,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,gCAAgC,EAA7C,CAA6C,EAAE,iBAAiB,CAAC;KACjH,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,8BAQC","file":"IsMongoId.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsMongoId = require(\"validator/lib/isMongoId\");\n\nexport const IS_MONGO_ID = \"isMongoId\";\n\n/**\n * Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.\n * If given value is not a string, then it returns false.\n */\nexport function isMongoId(value: string): boolean {\n    return typeof value === \"string\" && validatorJsIsMongoId(value);\n}\n\n/**\n * Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.\n */\nexport function IsMongoId(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_MONGO_ID,\n            validate: (value) => isMongoId(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must be a mongodb id\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}