{"version":3,"sources":["../../src/decorator/string/IsVariableWidth.ts"],"names":[],"mappings":";;AACA,4CAAuD;AACvD,0EAA6E;AAEhE,QAAA,iBAAiB,GAAG,iBAAiB,CAAC;AAEnD;;;GAGG;AACH,yBAAgC,KAAa;IACzC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,0BAA0B,CAAC,KAAK,CAAC,CAAC;AAC1E,CAAC;AAFD,0CAEC;AAED;;GAEG;AACH,yBAAgC,iBAAqC;IACjE,OAAO,uBAAU,CAAC;QACV,IAAI,EAAE,yBAAiB;QACvB,QAAQ,EAAE,UAAC,KAAK,IAAK,OAAA,eAAe,CAAC,KAAK,CAAC,EAAtB,CAAsB;QAC3C,cAAc,EAAE,yBAAY,CAAC,UAAC,UAAU,IAAK,OAAA,UAAU,GAAG,+DAA+D,EAA5E,CAA4E,EAAE,iBAAiB,CAAC;KAChJ,EACD,iBAAiB,CACpB,CAAC;AACN,CAAC;AARD,0CAQC","file":"IsVariableWidth.js","sourcesContent":["import {ValidationOptions} from \"../ValidationOptions\";\nimport {buildMessage, ValidateBy} from \"../ValidateBy\";\nimport validatorJsIsVariableWidth = require(\"validator/lib/isVariableWidth\");\n\nexport const IS_VARIABLE_WIDTH = \"isVariableWidth\";\n\n/**\n * Checks if the string contains variable-width chars.\n * If given value is not a string, then it returns false.\n */\nexport function isVariableWidth(value: string): boolean {\n    return typeof value === \"string\" && validatorJsIsVariableWidth(value);\n}\n\n/**\n * Checks if the string contains a mixture of full and half-width chars.\n */\nexport function IsVariableWidth(validationOptions?: ValidationOptions) {\n    return ValidateBy({\n            name: IS_VARIABLE_WIDTH,\n            validate: (value) => isVariableWidth(value),\n            defaultMessage: buildMessage((eachPrefix) => eachPrefix + \"$property must contain a full-width and half-width characters\", validationOptions)\n        },\n        validationOptions\n    );\n}\n"],"sourceRoot":"../.."}